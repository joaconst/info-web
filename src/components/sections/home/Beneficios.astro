---
import BeneficiosPc from "../home/beneficios/BeneficiosPc.astro"
import BeneficiosMobile from "../home/beneficios/BeneficiosMobile.astro"

import "../../../styles/flip-cards.css"
---

<section>
  <BeneficiosPc />
  <BeneficiosMobile />
</section>

<!-- Interacción y animación -->
<script>
  // Lógica para interacción en móvil y desktop
  document.querySelectorAll(".group").forEach((card: Element) => {
    const cardElement = card as HTMLElement;

    if (window.innerWidth <= 767) {
      cardElement.addEventListener(
        "touchstart",
        (e: TouchEvent) => {
          if (e.cancelable) e.preventDefault();
          cardElement.classList.toggle("flipped");
          const flipContainer = cardElement.querySelector(
            ".flip-container",
          ) as HTMLElement | null;
          if (flipContainer) {
            flipContainer.style.transform = cardElement.classList.contains(
              "flipped",
            )
              ? "rotateY(180deg)"
              : "rotateY(0deg)";
          }
        },
        { passive: false },
      );
    } else {
      cardElement.addEventListener("mouseenter", () => {
        cardElement.classList.add("flipped");
        const flipContainer = cardElement.querySelector(
          ".flip-container",
        ) as HTMLElement | null;
        if (flipContainer) {
          flipContainer.style.transform = "rotateY(180deg)";
        }
      });
      cardElement.addEventListener("mouseleave", () => {
        cardElement.classList.remove("flipped");
        const flipContainer = cardElement.querySelector(
          ".flip-container",
        ) as HTMLElement | null;
        if (flipContainer) {
          flipContainer.style.transform = "rotateY(0deg)";
        }
      });
    }

    // Permitir interacción con teclado
    cardElement.addEventListener("keydown", (e: KeyboardEvent) => {
      if (e.key === "Enter" || e.key === " ") {
        e.preventDefault();
        cardElement.classList.toggle("flipped");
        const flipContainer = cardElement.querySelector(
          ".flip-container",
        ) as HTMLElement | null;
        if (flipContainer) {
          flipContainer.style.transform = cardElement.classList.contains(
            "flipped",
          )
            ? "rotateY(180deg)"
            : "rotateY(0deg)";
        }
      }
    });

    // Atributos de accesibilidad
    cardElement.setAttribute("role", "button");
    cardElement.setAttribute("tabindex", "0");
    const flipContainer = cardElement.querySelector(
      ".flip-container",
    ) as HTMLElement | null;
    if (flipContainer) {
      flipContainer.setAttribute("aria-label", "Tarjeta interactiva");
    }
  });

  // Animación automática vertical al visualizar el componente
  const observerOptions: IntersectionObserverInit = {
    threshold: 0.5,
  };

  const observerCallback: IntersectionObserverCallback = (
    entries: IntersectionObserverEntry[],
    observer: IntersectionObserver,
  ) => {
    entries.forEach((entry: IntersectionObserverEntry) => {
      if (entry.isIntersecting) {
        const target = entry.target as HTMLElement;
        const flipCards = target.querySelectorAll(".group");
        flipCards.forEach((card: Element) => {
          const cardElement = card as HTMLElement;
          const flipContainer = cardElement.querySelector(
            ".flip-container",
          ) as HTMLElement | null;
          if (flipContainer) {
            flipContainer.classList.add(
              "vertical-flip",
              "animate-auto-flip-vertical",
            );

            flipContainer.addEventListener(
              "animationend",
              () => {
                flipContainer.classList.remove(
                  "vertical-flip",
                  "animate-auto-flip-vertical",
                );
              },
              { once: true },
            );
          }
        });
        observer.unobserve(entry.target);
      }
    });
  };

  const observer = new IntersectionObserver(observerCallback, observerOptions);

  const gridSections = document.querySelectorAll(
    "section.hidden.md\\:block, section.block.md\\:hidden",
  );
  gridSections.forEach((section: Element) => {
    observer.observe(section as HTMLElement);
  });
</script>
